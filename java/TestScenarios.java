
        package se.kth.clickr;
        import java.util.List;
        /*
        * This class was automatically generated by Floodway.
        */
        class TestScenarios{
            
public static class CreateParams{private String title;private String description;private List<String> tracks;private boolean open;private List<String> invitedClients;private List<String> invitedAdmins;public void setTitle(String title){this.title = title; }public String getTitle(){ return this.title; }public void setDescription(String description){this.description = description; }public String getDescription(){ return this.description; }public void setTracks(List<String> tracks){this.tracks = tracks; }public List<String> getTracks(){ return this.tracks; }public void setOpen(boolean open){this.open = open; }public boolean getOpen(){ return this.open; }public void setInvitedClients(List<String> invitedClients){this.invitedClients = invitedClients; }public List<String> getInvitedClients(){ return this.invitedClients; }public void setInvitedAdmins(List<String> invitedAdmins){this.invitedAdmins = invitedAdmins; }public List<String> getInvitedAdmins(){ return this.invitedAdmins; }}
public static class IdContainer{private String id;public void setId(String id){this.id = id; }public String getId(){ return this.id; }}
public static class TestScenario{private String id;private String title;private String description;private List<String> invitedAdmins;private List<String> invitedClients;private boolean open;private List<String> tracks;public void setId(String id){this.id = id; }public String getId(){ return this.id; }public void setTitle(String title){this.title = title; }public String getTitle(){ return this.title; }public void setDescription(String description){this.description = description; }public String getDescription(){ return this.description; }public void setInvitedAdmins(List<String> invitedAdmins){this.invitedAdmins = invitedAdmins; }public List<String> getInvitedAdmins(){ return this.invitedAdmins; }public void setInvitedClients(List<String> invitedClients){this.invitedClients = invitedClients; }public List<String> getInvitedClients(){ return this.invitedClients; }public void setOpen(boolean open){this.open = open; }public boolean getOpen(){ return this.open; }public void setTracks(List<String> tracks){this.tracks = tracks; }public List<String> getTracks(){ return this.tracks; }}
public static class NoParams{}
public static class ResultEnvelope{private List<TestScenario> items;public void setItems(List<TestScenario> items){this.items = items; }public List<TestScenario> getItems(){ return this.items; }}
public static class StreamResult{private String type;private String id;private TestScenario value;public void setType(String type){this.type = type; }public String getType(){ return this.type; }public void setId(String id){this.id = id; }public String getId(){ return this.id; }public void setValue(TestScenario value){this.value = value; }public TestScenario getValue(){ return this.value; }}
            
            
            public abstract static class CreateCallback{
                abstract void result(IdContainer result);
                abstract void err(String errorCode,String description);
            }
            
            public static Request create(CreateParams params,final CreateCallback callback){
                return new Request("testScenarios","create",params,new Request.RequestCallback(IdContainer.class){
                    @Override
                    public void res(Object result){
                        callback.result((IdContainer) result);
                    }
                    @Override
                    public void err(String ec,String desc){
                        callback.err(ec,desc);
                    }
                });
            }
        
            
            public abstract static class GetCallback{
                abstract void result(TestScenario result);
                abstract void err(String errorCode,String description);
            }
            
            public static Request get(IdContainer params,final GetCallback callback){
                return new Request("testScenarios","get",params,new Request.RequestCallback(TestScenario.class){
                    @Override
                    public void res(Object result){
                        callback.result((TestScenario) result);
                    }
                    @Override
                    public void err(String ec,String desc){
                        callback.err(ec,desc);
                    }
                });
            }
        
            
            public abstract static class GetAlltestScenariosCallback{
                abstract void result(ResultEnvelope result);
                abstract void err(String errorCode,String description);
            }
            
            public static Request getAlltestScenarios(NoParams params,final GetAlltestScenariosCallback callback){
                return new Request("testScenarios","getAlltestScenarios",params,new Request.RequestCallback(ResultEnvelope.class){
                    @Override
                    public void res(Object result){
                        callback.result((ResultEnvelope) result);
                    }
                    @Override
                    public void err(String ec,String desc){
                        callback.err(ec,desc);
                    }
                });
            }
        
            
            public abstract static class StreamAllCallback{
                abstract void result(StreamResult result);
                abstract void err(String errorCode,String description);
            }
            
            public static Request streamAll(NoParams params,final StreamAllCallback callback){
                return new Request("testScenarios","streamAll",params,new Request.RequestCallback(StreamResult.class){
                    @Override
                    public void res(Object result){
                        callback.result((StreamResult) result);
                    }
                    @Override
                    public void err(String ec,String desc){
                        callback.err(ec,desc);
                    }
                });
            }
        
        }
    